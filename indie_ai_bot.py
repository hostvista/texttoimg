import os
import logging
import asyncio
import base64
import sqlite3
import random
import string
from datetime import datetime, timedelta
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler
)
from dotenv import load_dotenv
import requests
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

# Load environment variables
load_dotenv()

# --- Configuration ---
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID"))
MAX_CONCURRENT_REQUESTS = 10
BASE_CREDITS = 3
PREMIUM_CREDITS = 15
REFERRAL_CREDITS = 5
DAILY_CREDITS = 2
RATE_LIMIT = 5
FONT_PATH = "arial.ttf"
WATERMARK_TEXT = "Generated by IndieAI"

# --- Conversation States ---
SELECTING_SIZE, ENTERING_PROMPT = range(2)

# --- Database Setup ---
conn = sqlite3.connect('premium.db', check_same_thread=False)
c = conn.cursor()

# Create tables
c.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY,
              username TEXT,
              credits INTEGER DEFAULT 0,
              blocked INTEGER DEFAULT 0,
              premium INTEGER DEFAULT 0,
              referral_code TEXT,
              referred_by INTEGER,
              daily_claimed DATETIME,
              requests_count INTEGER DEFAULT 0,
              last_request DATETIME,
              joined DATETIME DEFAULT CURRENT_TIMESTAMP)''')

c.execute('''CREATE TABLE IF NOT EXISTS coupons
             (code TEXT PRIMARY KEY,
              value INTEGER,
              expires DATETIME,
              uses_left INTEGER)''')

c.execute('''CREATE TABLE IF NOT EXISTS images
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              user_id INTEGER,
              prompt TEXT,
              dimensions TEXT,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

conn.commit()

# --- Helper Functions ---
def get_user(user_id):
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = c.fetchone()
    if not user:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        c.execute('''INSERT INTO users 
                    (user_id, credits, referral_code) 
                    VALUES (?, ?, ?)''',
                 (user_id, BASE_CREDITS, code))
        conn.commit()
        return (user_id, None, BASE_CREDITS, 0, 0, code, None, None, 0, None, datetime.now())
    return user

def is_admin(user_id):
    return user_id == ADMIN_USER_ID

def add_watermark(image):
    try:
        draw = ImageDraw.Draw(image)
        font = ImageFont.truetype(FONT_PATH, 40)
    except:
        font = ImageFont.load_default()
    
    text = WATERMARK_TEXT
    textwidth, textheight = draw.textsize(text, font)
    x = (image.width - textwidth) / 2
    y = (image.height - textheight) / 2
    draw.text((x, y), text, font=font, fill=(255,255,255,128))
    return image

# --- Keyboard Layouts ---
def main_menu(user):
    buttons = [
        [InlineKeyboardButton("🖼 Generate Image", callback_data='generate')],
        [InlineKeyboardButton("💰 Credits: {}".format(user[2]), callback_data='credits'),
         InlineKeyboardButton("🎫 Redeem Coupon", callback_data='redeem')],
        [InlineKeyboardButton("📜 History", callback_data='history'),
         InlineKeyboardButton("💎 Premium", callback_data='premium')]
    ]
    return InlineKeyboardMarkup(buttons)

def size_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("512x512", callback_data='512x512'),
         InlineKeyboardButton("768x768", callback_data='768x768')],
        [InlineKeyboardButton("1024x1024", callback_data='1024x1024'),
         InlineKeyboardButton("Custom", callback_data='custom')]
    ])

def admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("👥 User Management", callback_data='admin_users'),
         InlineKeyboardButton("📊 Statistics", callback_data='admin_stats')],
        [InlineKeyboardButton("🎫 Create Coupon", callback_data='admin_coupon'),
         InlineKeyboardButton("📢 Broadcast", callback_data='admin_broadcast')]
    ])

# --- Core Commands ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if context.args and len(context.args) > 0:
        referrer_id = int(context.args[0])
        if referrer_id != user[0]:
            c.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?",
                     (REFERRAL_CREDITS, referrer_id))
            c.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?",
                     (REFERRAL_CREDITS, user[0]))
            conn.commit()
    
    welcome_msg = f"""
🎨 *Welcome to IndieAI Premium* 🌟
✨ Credits Available: {user[2]}
🔗 Your Referral Code: `{user[5]}`
    """
    await update.message.reply_text(
        welcome_msg,
        reply_markup=main_menu(user),
        parse_mode='Markdown'
    )

# --- Image Generation Flow ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == 'generate':
        user = get_user(user_id)
        if user[3]:
            await query.message.reply_text("❌ Account blocked!")
            return ConversationHandler.END
            
        if user[8] >= RATE_LIMIT and not user[4]:
            await query.message.reply_text("🚨 Hourly limit reached!")
            return ConversationHandler.END
            
        await query.message.reply_text("🖼 Choose size:", reply_markup=size_keyboard())
        return SELECTING_SIZE

    elif data in ['512x512', '768x768', '1024x1024']:
        context.user_data['size'] = data
        await query.message.reply_text("📝 Enter your prompt:")
        return ENTERING_PROMPT

    elif data == 'custom':
        await query.message.reply_text("Enter size (e.g., 1280x720):")
        return SELECTING_SIZE

    elif data == 'history':
        await show_history(query.message)
        return

    elif data.startswith('admin_'):
        await handle_admin_callback(update, context)
        return

    return ConversationHandler.END

async def handle_custom_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        size = update.message.text.lower()
        width, height = map(int, size.split('x'))
        
        if width % 32 != 0 or height % 32 != 0:
            await update.message.reply_text("❌ Dimensions must be multiples of 32!")
            return SELECTING_SIZE
            
        if width > 2048 or height > 2048:
            await update.message.reply_text("❌ Max size 2048x2048!")
            return SELECTING_SIZE
            
        context.user_data['size'] = f"{width}x{height}"
        await update.message.reply_text("📝 Enter prompt:")
        return ENTERING_PROMPT
        
    except:
        await update.message.reply_text("❌ Invalid format! Use WxH")
        return SELECTING_SIZE

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    prompt = update.message.text
    size = context.user_data.get('size', '512x512')
    
    try:
        width, height = map(int, size.split('x'))
    except:
        await update.message.reply_text("❌ Invalid size!")
        return ConversationHandler.END

    if user[2] < 1:
        await update.message.reply_text("❌ Insufficient credits!")
        return ConversationHandler.END

    try:
        # Deduct credits
        c.execute("UPDATE users SET credits = ? WHERE user_id = ?",
                 (user[2] - 1, user[0]))
        
        # Generate image
        response = requests.post(
            "https://api.together.xyz/v1/images/generations",
            headers={"Authorization": f"Bearer {TOGETHER_API_KEY}"},
            json={
                "model": "black-forest-labs/FLUX.1-schnell-Free",
                "prompt": prompt,
                "width": width,
                "height": height,
                "steps": 4,
                "n": 1,
                "response_format": "b64_json"
            },
            timeout=30
        )

        if response.status_code == 200:
            image_data = response.json()['data'][0]['b64_json']
            image_bytes = base64.b64decode(image_data)
            img = Image.open(BytesIO(image_bytes))
            
            if not user[4]:
                img = add_watermark(img)
            
            png_buffer = BytesIO()
            img.save(png_buffer, format='PNG')
            png_buffer.seek(0)
            
            await update.message.reply_photo(
                photo=InputFile(png_buffer, filename="artwork.png"),
                caption=f"🖼 {width}x{height} | Credits: {user[2]-1}"
            )
            
            # Save history
            c.execute('''INSERT INTO images 
                       (user_id, prompt, dimensions) 
                       VALUES (?, ?, ?)''',
                     (user[0], prompt, f"{width}x{height}"))
            
            # Update metrics
            c.execute('''UPDATE users 
                       SET requests_count = requests_count + 1,
                           last_request = ?
                       WHERE user_id = ?''',
                     (datetime.now(), user[0]))
            conn.commit()

        else:
            await update.message.reply_text("⚠️ Generation failed! Refunded.")
            c.execute("UPDATE users SET credits=? WHERE user_id=?", (user[2], user[0]))
            conn.commit()

    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text("❌ Generation failed! Refunded.")
        c.execute("UPDATE users SET credits=? WHERE user_id=?", (user[2], user[0]))
        conn.commit()

    return ConversationHandler.END

# --- Admin Features ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("❌ Command not found!")
        return
    await update.message.reply_text("🔒 Admin Panel:", reply_markup=admin_keyboard())

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'admin_stats':
        c.execute("SELECT COUNT(*) FROM users")
        total_users = c.fetchone()[0]
        c.execute("SELECT SUM(credits) FROM users")
        total_credits = c.fetchone()[0] or 0
        c.execute("SELECT COUNT(*) FROM images")
        total_images = c.fetchone()[0]
        
        stats = f"""
📊 *Statistics*
👥 Users: {total_users}
💎 Credits: {total_credits}
🖼 Images: {total_images}
        """
        await query.message.reply_text(stats, parse_mode='Markdown')

    elif data == 'admin_coupon':
        await query.message.reply_text("Use /createcoupon <value> <days> <uses>")

async def create_coupon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    try:
        value = int(context.args[0])
        days = int(context.args[1])
        uses = int(context.args[2])
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
        expires = datetime.now() + timedelta(days=days)
        
        c.execute('''INSERT INTO coupons 
                   (code, value, expires, uses_left) 
                   VALUES (?, ?, ?, ?)''',
                 (code, value, expires, uses))
        conn.commit()
        await update.message.reply_text(
            f"🎫 Created Coupon!\nCode: `{code}`\nValue: {value}\nExpires: {expires.date()}\nUses: {uses}",
            parse_mode='Markdown'
        )
    except:
        await update.message.reply_text("Usage: /createcoupon <value> <days> <uses>")

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    try:
        target_id = int(context.args[0])
        c.execute("UPDATE users SET blocked=1 WHERE user_id=?", (target_id,))
        conn.commit()
        await update.message.reply_text(f"✅ Blocked user {target_id}")
    except:
        await update.message.reply_text("Usage: /block <user_id>")

# --- User Features ---
async def show_history(update: Update):
    user_id = update.effective_user.id
    c.execute("SELECT prompt, dimensions, created_at FROM images WHERE user_id=? ORDER BY created_at DESC LIMIT 10", (user_id,))
    history = c.fetchall()
    
    if not history:
        await update.reply_text("📭 No history found!")
        return
    
    text = "🕰️ *Last 10 Generations*\n\n"
    for idx, item in enumerate(history, 1):
        text += f"{idx}. {item[0]}\nSize: {item[1]} | Date: {item[2][:16]}\n\n"
    
    await update.reply_text(text, parse_mode='Markdown')

async def redeem_coupon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        code = context.args[0].upper().strip()
    except:
        await update.message.reply_text("Usage: /redeem <CODE>")
        return
    
    c.execute("SELECT * FROM coupons WHERE code=?", (code,))
    coupon = c.fetchone()
    
    if not coupon or datetime.now() > datetime.fromisoformat(coupon[2]) or coupon[3] <= 0:
        await update.message.reply_text("❌ Invalid coupon!")
        return
        
    # Update coupon
    c.execute("UPDATE coupons SET uses_left=? WHERE code=?", (coupon[3]-1, code))
    
    # Update user
    new_credits = get_user(user_id)[2] + coupon[1]
    c.execute("UPDATE users SET credits=? WHERE user_id=?", (new_credits, user_id))
    conn.commit()
    
    await update.message.reply_text(f"🎉 Added {coupon[1]} credits! New balance: {new_credits}")

# --- Main Application ---
def main():
    # Validate environment variables
    required_vars = ['TOGETHER_API_KEY', 'BOT_TOKEN', 'ADMIN_USER_ID']
    missing = [var for var in required_vars if not os.getenv(var)]
    if missing:
        logging.error(f"Missing environment variables: {', '.join(missing)}")
        return

    # Corrected application builder
    application = Application.builder().token(BOT_TOKEN).build()

    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_callback)],
        states={
            SELECTING_SIZE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_size),
                CallbackQueryHandler(handle_callback)
            ],
            ENTERING_PROMPT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image)
            ]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)]
    )

    # Add handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(CommandHandler('block', block_user))
    application.add_handler(CommandHandler('redeem', redeem_coupon))
    application.add_handler(CommandHandler('createcoupon', create_coupon))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^admin_'))

    # Start bot
    application.run_polling()

if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    main()
