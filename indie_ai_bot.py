import os
import logging
import asyncio
import base64
import sqlite3
import random
import string
from datetime import datetime, timedelta
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler
)
from dotenv import load_dotenv
import requests
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

# Load environment variables
load_dotenv()

# --- Configuration ---
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID"))
MAX_CONCURRENT_REQUESTS = 10
BASE_CREDITS = 3
PREMIUM_CREDITS = 15
REFERRAL_CREDITS = 5
DAILY_CREDITS = 2
RATE_LIMIT = 5
FONT_PATH = "arial.ttf"
WATERMARK_TEXT = "Generated by IndieAI"

# --- Conversation States ---
(SELECTING_SIZE, SELECTING_MODEL, 
 ENTERING_PROMPT, PAYMENT_CONFIRM) = range(4)

# --- Database Setup ---
conn = sqlite3.connect('premium.db', check_same_thread=False)
c = conn.cursor()

# Create tables
c.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY,
              username TEXT,
              credits INTEGER DEFAULT 0,
              blocked INTEGER DEFAULT 0,
              premium INTEGER DEFAULT 0,
              referral_code TEXT,
              referred_by INTEGER,
              daily_claimed DATETIME,
              requests_count INTEGER DEFAULT 0,
              last_request DATETIME,
              joined DATETIME DEFAULT CURRENT_TIMESTAMP)''')

c.execute('''CREATE TABLE IF NOT EXISTS coupons
             (code TEXT PRIMARY KEY,
              value INTEGER,
              expires DATETIME,
              uses_left INTEGER)''')

c.execute('''CREATE TABLE IF NOT EXISTS subscriptions
             (user_id INTEGER PRIMARY KEY,
              plan TEXT,
              ends DATETIME)''')

c.execute('''CREATE TABLE IF NOT EXISTS models
             (name TEXT PRIMARY KEY,
              credits INTEGER,
              premium_only BOOLEAN)''')

# Initialize default models
c.execute('''INSERT OR IGNORE INTO models VALUES 
            ('Starter', 1, 0),
            ('Pro', 2, 1),
            ('Ultra', 3, 1)''')
conn.commit()

# --- Helper Functions ---
def get_user(user_id):
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = c.fetchone()
    if not user:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        c.execute('''INSERT INTO users 
                    (user_id, credits, referral_code) 
                    VALUES (?, ?, ?)''',
                 (user_id, BASE_CREDITS, code))
        conn.commit()
        return (user_id, None, BASE_CREDITS, 0, 0, code, None, None, 0, None, datetime.now())
    return user

def is_premium(user_id):
    c.execute("SELECT ends FROM subscriptions WHERE user_id=? AND ends > CURRENT_TIMESTAMP", (user_id,))
    return c.fetchone() is not None

def add_watermark(image):
    try:
        draw = ImageDraw.Draw(image)
        font = ImageFont.truetype(FONT_PATH, 40)
    except:
        font = ImageFont.load_default()
    
    text = WATERMARK_TEXT
    textwidth, textheight = draw.textsize(text, font)
    x = (image.width - textwidth) / 2
    y = (image.height - textheight) / 2
    draw.text((x, y), text, font=font, fill=(255,255,255,128))
    return image

# --- Keyboard Layouts ---
def main_menu(user):
    buttons = [
        [InlineKeyboardButton("🖼 Generate Image", callback_data='generate')],
        [InlineKeyboardButton("💰 Credits: {}".format(user[2]), callback_data='credits'),
         InlineKeyboardButton("🎫 Redeem Coupon", callback_data='redeem')],
        [InlineKeyboardButton("📜 History", callback_data='history'),
         InlineKeyboardButton("💎 Premium", callback_data='premium')]
    ]
    if user[4]:
        buttons.append([InlineKeyboardButton("⭐ Premium Benefits", callback_data='premium_benefits')])
    return InlineKeyboardMarkup(buttons)

def size_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("512x512", callback_data='512x512'),
         InlineKeyboardButton("768x768", callback_data='768x768')],
        [InlineKeyboardButton("1024x1024", callback_data='1024x1024'),
         InlineKeyboardButton("Custom", callback_data='custom')]
    ])

def premium_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("💎 Basic Plan (15€/mo)", callback_data='premium_basic')],
        [InlineKeyboardButton("🚀 Pro Plan (25€/mo)", callback_data='premium_pro')],
        [InlineKeyboardButton("🔮 Ultra Plan (40€/mo)", callback_data='premium_ultra')],
        [InlineKeyboardButton("🎁 Refer Friends", callback_data='referral')]
    ])

def admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("👥 User Management", callback_data='admin_users')],
        [InlineKeyboardButton("📊 Statistics", callback_data='admin_stats')],
        [InlineKeyboardButton("🎫 Create Coupon", callback_data='admin_coupon')],
        [InlineKeyboardButton("📢 Broadcast", callback_data='admin_broadcast')]
    ])

# --- Core Commands ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if context.args and len(context.args) > 0:
        referrer_id = int(context.args[0])
        if referrer_id != user[0]:
            handle_referral(referrer_id, user[0])
    
    welcome_msg = f"""
🎨 *Welcome to IndieAI Premium* 🌟

{'⭐ Premium Member Benefits ⭐' if user[4] else '✨ Free Tier Access'}
💎 Credits: {user[2]}
🔗 Referral Code: `{user[5]}`
    """
    await update.message.reply_text(
        welcome_msg,
        reply_markup=main_menu(user),
        parse_mode='Markdown'
    )

# --- Image Generation Flow ---
async def start_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if user[3]:
        await update.message.reply_text("❌ Your account is blocked!")
        return ConversationHandler.END
    
    if user[8] >= RATE_LIMIT and not is_premium(user[0]):
        await update.message.reply_text("🚨 Hourly limit reached! Upgrade to premium.")
        return ConversationHandler.END
    
    c.execute("SELECT name FROM models WHERE premium_only <= ?", (1 if user[4] else 0,))
    models = [m[0] for m in c.fetchall()]
    
    buttons = [InlineKeyboardButton(m, callback_data=f"model_{m}") for m in models]
    keyboard = InlineKeyboardMarkup([buttons[i:i+2] for i in range(0, len(buttons), 2)])
    
    await update.message.reply_text(
        "🖌️ Select AI Model:",
        reply_markup=keyboard
    )
    return SELECTING_MODEL

async def select_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    model = query.data.split('_')[1]
    context.user_data['model'] = model
    await query.message.reply_text("🖼 Choose size:", reply_markup=size_keyboard())
    return SELECTING_SIZE

async def handle_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    size = query.data
    if size == 'custom':
        await query.message.reply_text("Enter size (e.g., 1280x720):")
        return SELECTING_SIZE
    context.user_data['size'] = size
    await query.message.reply_text("📝 Enter your prompt:")
    return ENTERING_PROMPT

async def process_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    prompt = update.message.text
    model = context.user_data.get('model', 'Starter')
    size = context.user_data.get('size', '512x512')
    
    try:
        width, height = map(int, size.split('x'))
    except:
        await update.message.reply_text("❌ Invalid size!")
        return ConversationHandler.END
    
    # Deduct credits
    c.execute("SELECT credits FROM models WHERE name=?", (model,))
    cost = c.fetchone()[0]
    if user[2] < cost:
        await update.message.reply_text("❌ Insufficient credits!")
        return ConversationHandler.END
    
    new_credits = user[2] - cost
    c.execute("UPDATE users SET credits=? WHERE user_id=?", (new_credits, user[0]))
    
    # Generate image
    try:
        response = requests.post(
            "https://api.together.xyz/v1/images/generations",
            headers={"Authorization": f"Bearer {TOGETHER_API_KEY}"},
            json={
                "model": "black-forest-labs/FLUX.1-schnell-Free",
                "prompt": prompt,
                "width": width,
                "height": height,
                "steps": 4,
                "n": 1,
                "response_format": "b64_json"
            },
            timeout=30
        )

        if response.status_code == 200:
            image_data = response.json()['data'][0]['b64_json']
            image_bytes = base64.b64decode(image_data)
            img = Image.open(BytesIO(image_bytes))
            
            if not is_premium(user[0]):
                img = add_watermark(img)
            
            png_buffer = BytesIO()
            img.save(png_buffer, format='PNG')
            png_buffer.seek(0)
            
            await update.message.reply_photo(
                photo=InputFile(png_buffer, filename="artwork.png"),
                caption=f"🖼 {width}x{height} | Credits: {new_credits}"
            )
            
            # Save history
            c.execute('''INSERT INTO images 
                       (user_id, prompt, dimensions, model) 
                       VALUES (?, ?, ?, ?)''',
                     (user[0], prompt, f"{width}x{height}", model))
            
            # Update request count
            c.execute('''UPDATE users 
                       SET requests_count = requests_count + 1,
                           last_request = ?
                       WHERE user_id = ?''',
                     (datetime.now(), user[0]))
            conn.commit()

        else:
            await update.message.reply_text("⚠️ Generation failed! Credits refunded.")
            c.execute("UPDATE users SET credits=? WHERE user_id=?", (user[2], user[0]))
            conn.commit()

    except Exception as e:
        logging.error(f"Generation error: {str(e)}")
        await update.message.reply_text("❌ Generation failed! Credits refunded.")
        c.execute("UPDATE users SET credits=? WHERE user_id=?", (user[2], user[0]))
        conn.commit()

    return ConversationHandler.END

# --- Admin Features ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("❌ Command not found!")
        return
    await update.message.reply_text("🔒 Admin Panel:", reply_markup=admin_keyboard())

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    c.execute("SELECT SUM(credits) FROM users")
    total_credits = c.fetchone()[0] or 0
    c.execute("SELECT COUNT(*) FROM images")
    total_images = c.fetchone()[0]
    
    stats = f"""
📊 *System Statistics*
👥 Users: {total_users}
💎 Credits: {total_credits}
🖼 Images: {total_images}
💸 Revenue: €{(total_users * 10):.2f}
    """
    await update.message.reply_text(stats, parse_mode='Markdown')

async def create_coupon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        value = int(context.args[0])
        days = int(context.args[1])
        uses = int(context.args[2])
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
        expires = datetime.now() + timedelta(days=days)
        
        c.execute('''INSERT INTO coupons 
                   (code, value, expires, uses_left) 
                   VALUES (?, ?, ?, ?)''',
                 (code, value, expires, uses))
        conn.commit()
        await update.message.reply_text(
            f"🎫 Coupon Created!\n"
            f"Code: `{code}`\n"
            f"Value: {value} credits\n"
            f"Expires: {expires.strftime('%Y-%m-%d')}\n"
            f"Uses: {uses}",
            parse_mode='Markdown'
        )
    except:
        await update.message.reply_text("Usage: /coupon <value> <days> <uses>")

# --- Premium Features ---
async def handle_referral(referrer_id, new_user_id):
    c.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?",
             (REFERRAL_CREDITS, referrer_id))
    c.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?",
             (REFERRAL_CREDITS, new_user_id))
    conn.commit()

async def daily_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    last_claim = user[7]
    
    if last_claim and (datetime.now() - datetime.fromisoformat(last_claim)).days < 1:
        await update.message.reply_text("⏳ Come back tomorrow!")
        return
        
    c.execute("UPDATE users SET credits = credits + ?, daily_claimed = ? WHERE user_id = ?",
             (DAILY_CREDITS, datetime.now(), user[0]))
    conn.commit()
    await update.message.reply_text(f"🎁 +{DAILY_CREDITS} daily credits!")

# --- Main Application ---
def main():
    application = Application.builder().token=BOT_TOKEN).build()

    # Core commands
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('daily', daily_reward))
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(CommandHandler('coupon', create_coupon))

    # Conversation handler
    application.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(start_generation, pattern='^generate$')],
        states={
            SELECTING_MODEL: [CallbackQueryHandler(select_model, pattern='^model_')],
            SELECTING_SIZE: [
                CallbackQueryHandler(handle_size, pattern='^(512|768|1024|custom)$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_size)
            ],
            ENTERING_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_prompt)]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)]
    ))

    # Admin callbacks
    application.add_handler(CallbackQueryHandler(admin_stats, pattern='^admin_stats$'))
    application.add_handler(CallbackQueryHandler(create_coupon, pattern='^admin_coupon$'))

    # Premium features
    application.add_handler(CallbackQueryHandler(lambda u,c: u.effective_message.reply_text(
        "🌟 Premium Benefits:\n\n- No ads\n- Priority processing\n- Exclusive models\n- Higher limits"
    ), pattern='^premium_benefits$'))

    application.run_polling()

if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    main()
